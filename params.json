{"name":"Jbehave-junit-reporter-2","body":"## About\r\n\r\nThe JBehave JUnit reporter is an addon to [JBehave](http://jbehave.org) 2 that provides fine-grained visualisation and reporting around the progress of your stories. Each JBehave step is tracked and reported on as an individual test case. \r\n\r\nIf you're running a story as a JUnit test through your favorite IDE, you'll be able to get output like this:\r\n\r\n<img src=\"http://www.moralesce.com/wp-content/uploads/2012/06/jbehave-scenario-reporter.png\"></img>\r\n\r\nYou can gain this capability by simply dropping the jbehave-junit-reporter JAR file in your classpath, and then telling the reporter what you'd like to report on using the @ReportOn annotation. Visit the [downloads](https://github.com/BrandonJohnGrenier/jbehave-junit-reporter/downloads) page to grab a copy of the library.\r\n\r\n<br/>\r\n\r\n## What You Need\r\n\r\n#### JUnit 4.4 or Later\r\nThe JBehave JUnit reporter depends on JUnit 4.4 or later, and is not compatible with earlier versions of JUnit.\r\n\r\n#### JBehave 2\r\nThe JBehave JUnit reporter depends the 2.x series of JBehave (2.0.0 to 2.5.9), and is not compatible with JBehave 3.0.0 or above.\r\n\r\n<br/>\r\n\r\n## How it Works\r\n\r\nThe reporter will visually mark failing steps, and also provides a count of the number of steps and stories that are failing.\r\n\r\n<img src=\"http://www.moralesce.com/wp-content/uploads/2012/06/jbehave-failing-steps.png\"></img>\r\n\r\n<br/>\r\n\r\nThe reporter will visually mark pending steps, and also provides a count of the number of steps that are pending. These are reported as 'ignored' in JUnit.\r\n\r\n<img src=\"http://www.moralesce.com/wp-content/uploads/2012/06/jbehave-pending-steps.png\"></img>\r\n\r\n<br/>\r\n\r\n## A Walkthrough\r\nTo show you how to use the JBehave JUnit reporter, we'll go through a complete example\r\n\r\n<br/>\r\n\r\nFirst, we'll create a plain text file named **staff_member_logs_in** with the following content:\r\n\r\n\tStory: As a staff member, I want to login so that I can get my work done.\r\n\r\n\r\n\tScenario: A staff member provides a valid username and password\r\n\r\n\tGiven a staff member is on the Login page\r\n\tWhen the staff member enters a username Administrator and password Password\r\n\tAnd the staff member clicks on the Login button\r\n\tThen the staff member should be redirected to the Home page\r\n\r\n\tScenario: A staff member provides an invalid username\r\n\r\n\tGiven a staff member is on the Login page\r\n\tWhen the staff member enters a username Rubbish and password Password\r\n\tAnd the staff member clicks on the Login button\r\n\tThen the staff member should be redirected to the Login page\r\n\tAnd the staff member is presented with a login message: Invalid username or password, try again\r\n\t\r\n<br/>\r\n\r\nNext, we'll create a Java class named **LoginSteps.java** which will map our text descriptions to Java methods. Note the use of the @Given, @When and @Then annotations, and how they map to the steps above. For readability purposes we've just mapped a few text descriptions.\r\n\r\nAlso take note of the Assert.assertTrue(true) calls within each method. This is where your standard JUnit assert-y calls would typically go in actual tests.\r\n\r\n\timport junit.framework.Assert;\r\n\r\n\timport org.jbehave.scenario.annotations.Given;\r\n\timport org.jbehave.scenario.annotations.Then;\r\n\timport org.jbehave.scenario.annotations.When;\r\n\timport org.jbehave.scenario.steps.Steps;\r\n\r\n\tpublic class LoginSteps extends Steps {\r\n\r\n\t\t@Given(\"a staff member is on the Login page\")\r\n\t\tpublic void onTheLoginPage() {\r\n\t\t\tAssert.assertTrue(true);\r\n\t\t}\r\n\r\n\t\t@When(\"the staff member enters a username $username and password $password\")\r\n\t\tpublic void enterCredentials(String username, String password) {\r\n\t\t\tAssert.assertTrue(true);\r\n\t\t}\r\n\r\n\t\t@Then(\"the staff member should be redirected to the Home page\")\r\n\t\tpublic void shouldBeRedirectedToTheHomePage() {\r\n\t\t\tAssert.assertTrue(true);\r\n\t\t}\r\n\r\n\t}\r\n\r\n<br/>\r\n\r\nTo wrap things up, create a class named **StaffMemberLogsIn.java**, and place it in the same directory as our text file.\r\n\r\n\r\n    import org.jbehave.scenario.JUnitScenario;\r\n\timport org.jbehave.scenario.reporters.ScenarioReporter;\r\n\timport org.junit.runner.RunWith;\r\n\r\n\timport com.moralesce.jbehave.JUnitScenarioRunner;\r\n\timport com.moralesce.jbehave.DefaultStoryConfiguration;\r\n\timport com.moralesce.jbehave.annotations.ReportOn;\r\n\timport com.moralesce.jbehave.examples.steps.LoginSteps;\r\n\r\n\t@RunWith(JUnitScenarioRunner.class)\r\n\t@ReportOn(LoginSteps.class)\r\n\tpublic class StaffMemberLogsIn extends JUnitScenario {\r\n\r\n\t\tpublic StaffMemberLogsIn(ScenarioReporter reporter) {\r\n\t\t\tsuper(new SimplePropertyBasedConfiguration(reporter), new LoginSteps());\r\n\t\t}\r\n\r\n\t}\r\n\t\r\nThat's it! You should be able to report on your first JBehave test. A few points to note here:\r\n\r\n1. We're configuring JUnit to @RunWith our JUnitScenarioRunner.\r\n2. As we've touched on before, we want to @ReportOn the steps we defined in our LoginSteps class.\r\n3. Our class extends JUnitScenario - every JBehave test must extend JUnitScenario.\r\n4. You should be able to run this test as a JUnit test, and get output similar to the screenshots presented above.\r\n\r\n<br/>\r\n\r\nWe are using a PropertyBasedConfiguration instance named SimplePropertyBasedConfiguration instance. Custom JBehave configuration is a bit beyond our scope, however it is important to note that if you do want to use a different PropertyBasedConfiguration implementation you can. You'll just need to setup the @UseConfiguration annotation, shown in the example below: \r\n\r\n\r\n\r\n\timport org.jbehave.scenario.JUnitScenario;\r\n\timport org.jbehave.scenario.reporters.ScenarioReporter;\r\n\timport org.junit.runner.RunWith;\r\n\t\r\n\timport com.moralesce.jbehave.JUnitScenarioRunner;\r\n\timport com.moralesce.jbehave.annotations.ReportOn;\r\n\timport com.moralesce.jbehave.annotations.UseConfiguration;\r\n\timport com.moralesce.jbehave.examples.steps.LoginSteps;\r\n\r\n\t@RunWith(JUnitScenarioRunner.class)\r\n\t@ReportOn(LoginSteps.class)\r\n\t@UseConfiguration(MyCustomPropertyConfiguration.class)\r\n\tpublic class StaffMemberLogsIn extends JUnitScenario {\r\n\r\n\t\tpublic StaffMemberLogsIn(ScenarioReporter reporter) {\r\n\t\t\tsuper(new MyCustomPropertyConfiguration(reporter), new LoginSteps());\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n<br/>\r\n\r\n## Liscence\r\n\r\nThe JBehave JUnit reporter is licensed under Apache 2.0.\r\n\r\n<br/>","tagline":"A library for JBehave 2 that provides fine-grained reporting of stories, scenarios and steps in JUnit.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}